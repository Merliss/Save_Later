// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SaveLater.Persistence.EF;

#nullable disable

namespace SaveLater.Persistence.EF.Migrations
{
    [DbContext(typeof(SaveLaterContext))]
    [Migration("20240327145754_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SaveLater.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Programowanie info",
                            Name = "programowanie"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "C#",
                            Name = "csharp"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Android info",
                            Name = "android"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DisplayName = "Docker",
                            Name = "docker"
                        });
                });

            modelBuilder.Entity("SaveLater.Domain.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AlreadyHappend")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacebookEventUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SlidesUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WatchFacebookLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WatchYoutbeLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlreadyHappend = false,
                            Date = new DateTime(2024, 4, 6, 15, 57, 53, 678, DateTimeKind.Local).AddTicks(9087),
                            Description = "Ustalenie architektury nie jest prostym zadaniem. Każda decyzja może mieć wielkie komplikacje potem.",
                            FacebookEventUrl = "https://www.facebook.com/events/407358067213893/",
                            ImageUrl = "https://cezarywalenciuk.pl/posts/fileswebinars/17_apliacjacsharpodzeraarchitekturacqrs.jpg",
                            SlidesUrl = "",
                            Title = "Aplikacja C# od Zera Architektura, CQRS, Dobre praktyki",
                            WatchFacebookLink = "",
                            WatchYoutbeLink = ""
                        },
                        new
                        {
                            Id = 2,
                            AlreadyHappend = false,
                            Date = new DateTime(2024, 2, 16, 15, 57, 53, 678, DateTimeKind.Local).AddTicks(9156),
                            Description = "Kontenery są tutaj. Kubernetes jest de facto platformą do ich uruchamiania i zarządzania.",
                            FacebookEventUrl = "https://www.facebook.com/events/407358067213893/",
                            ImageUrl = "https://cezarywalenciuk.pl/posts/fileswebinars/17_apliacjacsharpodzeraarchitekturacqrs.jpg",
                            SlidesUrl = "https://panniebieski.github.io/webinar-Kubernetes-Docker-Wytlumacz-mi-i-pokaz/",
                            Title = "Kubernetes i Docker : Wytłumacz mi i pokaż",
                            WatchFacebookLink = "https://www.facebook.com/watch/live/?v=2775230679405348&ref=watch_permalink",
                            WatchYoutbeLink = "https://www.youtube.com/watch?v=7g00wOg9Jto"
                        });
                });

            modelBuilder.Entity("SaveLater.Domain.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Damian",
                            CategoryId = 1,
                            Created = new DateTime(2023, 9, 27, 15, 57, 53, 678, DateTimeKind.Local).AddTicks(9217),
                            Description = "Nasze aplikacje ASP.NET CORE coraz częściej są tylko aplikacją REST. To oczywiście wymaga Walidacji po stronie klienta i po stronie serwera\r\n                Jak taką walidację jak najszybciej zrobić.Może przecież sam napisać takie warunki,\r\n                ale przy dużej ilości klas,\r\n                które występują jako parametry mija się to z celem.\r\n\r\n                Możesz też skorzystać z atrybutów i oznaczyć reguły do każdej właściwości.",
                            ImageUrl = "https://cezarywalenciuk.pl/Posts/programing/icons/_withbackground/R2/656_walidacja-z-fluentvalidation-waspnet-core--swagger.png",
                            Rate = 8,
                            Title = "Walidacja z FluentValidation w ASP.NET Core + Swagger",
                            Url = "https://cezarywalenciuk.pl/blog/programing/walidacja-z-fluentvalidation-waspnet-core--swagger"
                        },
                        new
                        {
                            Id = 2,
                            Author = "Ewa",
                            CategoryId = 1,
                            Created = new DateTime(2023, 11, 27, 15, 57, 53, 678, DateTimeKind.Local).AddTicks(9227),
                            Description = "Implementacja autoryzacji i uwierzytelniania w aplikacjach ASP.NET Core jest kluczowa dla zapewnienia bezpieczeństwa.\r\n    Często wykorzystuje się tu gotowe mechanizmy, takie jak JWT lub sesje.",
                            ImageUrl = "https://example.com/your-image2.png",
                            Rate = 9,
                            Title = "Autoryzacja i uwierzytelnianie w ASP.NET Core",
                            Url = "https://example.com/your-url2"
                        },
                        new
                        {
                            Id = 3,
                            Author = "Jan",
                            CategoryId = 3,
                            Created = new DateTime(2024, 1, 27, 15, 57, 53, 678, DateTimeKind.Local).AddTicks(9232),
                            Description = "Efektywne zarządzanie bazą danych w aplikacjach ASP.NET Core to kluczowy element wydajności i skalowalności systemu.\r\n    Warto zastosować narzędzia ORM, takie jak Entity Framework Core, oraz pamiętać o optymalizacji zapytań.",
                            ImageUrl = "https://example.com/your-image3.png",
                            Rate = 7,
                            Title = "Zarządzanie bazą danych w ASP.NET Core + Android",
                            Url = "https://example.com/your-url3"
                        },
                        new
                        {
                            Id = 4,
                            Author = "Katarzyna",
                            CategoryId = 4,
                            Created = new DateTime(2024, 2, 27, 15, 57, 53, 678, DateTimeKind.Local).AddTicks(9236),
                            Description = "Wytwarzanie interfejsów użytkownika w aplikacjach ASP.NET Core wymaga nie tylko znajomości HTML, CSS i JavaScript,\r\n    ale także narzędzi i bibliotek, takich jak Angular, React czy Vue.js. Docker",
                            ImageUrl = "https://example.com/your-image4.png",
                            Rate = 8,
                            Title = "Tworzenie interfejsów użytkownika w ASP.NET Core w Docker",
                            Url = "https://example.com/your-url4"
                        });
                });

            modelBuilder.Entity("SaveLater.Domain.Entities.Post", b =>
                {
                    b.HasOne("SaveLater.Domain.Entities.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SaveLater.Domain.Entities.Category", b =>
                {
                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
